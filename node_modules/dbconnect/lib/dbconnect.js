// Generated by CoffeeScript 1.4.0
(function() {
  var DBConnect, EventEmitter, Schema, uuid, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  _ = require('underscore');

  uuid = require('./uuid');

  EventEmitter = require('events').EventEmitter;

  Schema = require('./schema');

  DBConnect = (function(_super) {

    __extends(DBConnect, _super);

    DBConnect.Schema = Schema;

    DBConnect.connTypes = {};

    DBConnect.uuid = uuid.v4;

    DBConnect.register = function(type, connector) {
      if (this.connTypes.hasOwnProperty(type)) {
        throw new Error("DBConnect.register_type_exists: " + type);
      }
      return this.connTypes[type] = connector;
    };

    DBConnect.hasType = function(type) {
      if (this.connTypes.hasOwnProperty(type)) {
        return this.connTypes[type];
      } else {
        return void 0;
      }
    };

    DBConnect.inners = {};

    DBConnect.has = function(name) {
      if (this.inners.hasOwnProperty(name)) {
        return this.inners[name];
      } else {
        return void 0;
      }
    };

    DBConnect.setup = function(args) {
      var module, _i, _len, _ref, _results;
      if (this.inners.hasOwnProperty(args.name)) {
        throw new Error("DBConnect.setup_connection_exists: " + args.name);
      }
      if (!this.connTypes.hasOwnProperty(args.type)) {
        throw new Error("DBConnect.unknown_type: " + args.type);
      }
      this.inners[args.name] = args;
      args.loaders || (args.loaders = {});
      if (args.hasOwnProperty('module')) {
        if (args['module'] instanceof Array) {
          _ref = args['module'];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            module = _ref[_i];
            _results.push(args.loaders[module] = require(module));
          }
          return _results;
        } else {
          return args.loaders[args.module] = require(args.module);
        }
      }
    };

    DBConnect.make = function(args) {
      var conn, type;
      if (!this.inners.hasOwnProperty(args)) {
        throw new Error("DBConnect.unknownSetup: " + args);
      } else {
        args = this.inners[args];
        type = this.connTypes[args.type];
        conn = new type(args);
        if (args.schema instanceof Schema) {
          conn.attachSchema(args.schema);
        }
        if (args.tableName instanceof Function) {
          conn.tableName = args.tableName;
        }
        return conn;
      }
    };

    DBConnect.defaultOptions = {};

    DBConnect.prototype.tableName = function(name) {
      return name;
    };

    function DBConnect(args) {
      var key, val, _ref;
      this.args = _.extend({}, this.constructor.defaultOptions, args);
      this.modules = {};
      this.prepared = {};
      this.currentUser = null;
      _ref = this.args.loaders;
      for (key in _ref) {
        val = _ref[key];
        this.loadModule(key, val);
      }
    }

    DBConnect.prototype.loadModule = function(key, loader) {
      var val, _results;
      if (this.modules.hasOwnProperty(key)) {
        console.error('conn.loadModule:duplicate_loader_key', key);
        throw {
          duplicate_loader_key: key
        };
      } else {
        this.modules[key] = loader;
        if (loader instanceof Function) {
          return loader(this);
        } else if (loader instanceof Object) {
          _results = [];
          for (key in loader) {
            val = loader[key];
            if (loader.hasOwnProperty(key)) {
              if (val instanceof Function) {
                _results.push(this.prepare(key, val));
              } else {
                _results.push(this.prepareSpecial(key, val));
              }
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        } else {
          console.error('conn.loadModule:not_a_loader', key, loader);
        }
      }
    };

    DBConnect.prototype.attachSchema = function(schema) {
      if (!(schema instanceof Schema)) {
        throw new Error("attachSchema:not_a_schema " + schema);
      }
      this.schema = schema;
      return schema.conn = this;
    };

    DBConnect.prototype.connect = function(cb) {};

    DBConnect.prototype.query = function(stmt, args, cb) {
      if (this.prepared.hasOwnProperty(stmt)) {
        return this.prepared[stmt](this, args, cb);
      } else {
        return this._query.apply(this, arguments);
      }
    };

    DBConnect.prototype.queryOne = function(stmt, args, cb) {
      var _this = this;
      return this.query(stmt, args, function(err, res) {
        if (err) {
          return cb(err);
        } else if (!res || res.length === 0) {
          return cb({
            error: 'no_records_found'
          });
        } else {
          return cb(null, res[0]);
        }
      });
    };

    DBConnect.prototype.prepare = function(key, func) {
      if (this.prepared.hasOwnProperty(key)) {
        throw new Error("" + this.constructor.name + ".duplicate_prepare_stmt: " + key);
      }
      if (this.hasOwnProperty(key)) {
        throw new Error("" + this.constructor.name + ".duplicate_prepare_stmt: " + key);
      }
      if (func instanceof Function) {
        this.prepared[key] = func;
        return this[key] = func;
      } else {
        throw new Error("" + this.constructor.name + ".invalid_prepare_stmt_not_a_function: " + func);
      }
    };

    DBConnect.prototype.prepareSpecial = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.prepare.apply(this, args);
    };

    DBConnect.prototype.disconnect = function(cb) {};

    DBConnect.prototype.open = function(cb) {
      return this.connect(cb);
    };

    DBConnect.prototype.close = function(cb) {
      return this.disconnect(cb);
    };

    DBConnect.prototype.beginTrans = function(cb) {
      return cb(null, this);
    };

    DBConnect.prototype.commit = function(cb) {
      return cb(null, this);
    };

    DBConnect.prototype.rollback = function(cb) {
      return cb(null, this);
    };

    DBConnect.prototype.doneTrans = function(cb) {
      var _this = this;
      return function(err, res) {
        if (err) {
          return _this.rollback(function() {
            return cb(err);
          });
        } else {
          return _this.commit(function(err) {
            if (err) {
              return cb(err);
            } else {
              return cb(null, res);
            }
          });
        }
      };
    };

    DBConnect.prototype.insert = function(tableName, obj, cb) {
      var query, rec, res, table,
        _this = this;
      try {
        if (!this.schema) {
          throw new Error("dbconnect.insert:schema_missing");
        }
        table = this.schema.hasTable(tableName);
        if (!table) {
          throw new Error("dbconnect:insert:unknown_table: " + tableName);
        }
        res = (function() {
          var _i, _len, _results;
          if (obj instanceof Array) {
            if (!this.supports('insertMulti')) {
              throw new Error("" + this.constructor.name + ".insert:multiple_records_not_supported");
            } else {
              _results = [];
              for (_i = 0, _len = obj.length; _i < _len; _i++) {
                rec = obj[_i];
                _results.push(table.make(rec));
              }
              return _results;
            }
          } else {
            return table.make(obj);
          }
        }).call(this);
        query = this.generateInsert(table, res);
        return this.query(query, res, function(err, results) {
          if (err) {
            return cb(err);
          } else {
            if (results instanceof Array) {
              return cb(null, _this.makeRecordSet(tableName, results));
            } else {
              return cb(null, _this.makeRecord(tableName, results));
            }
          }
        });
      } catch (e) {
        return cb(e);
      }
    };

    DBConnect.prototype["delete"] = function(tableName, args, cb) {
      var query, table,
        _this = this;
      if (arguments.length === 2) {
        cb = args;
        args = {};
      }
      try {
        if (!this.schema) {
          return cb(new Error("dbconnect.delete:schema_missing"));
        }
        table = this.schema.hasTable(tableName);
        if (!table) {
          return cb(new Error("dbconnect:delete:unknown_table: " + tableName));
        }
        query = this.generateDelete(table, args);
        return this.query(query, {}, function(err) {
          if (err) {
            return cb(err);
          } else {
            return cb(null);
          }
        });
      } catch (e) {
        return cb(e);
      }
    };

    DBConnect.prototype.select = function(tableName, query, cb) {
      var table,
        _this = this;
      if (arguments.length === 2) {
        cb = query;
        query = {};
      }
      try {
        if (!this.schema) {
          return cb(new Error("dbconnect.select:schema_missing"));
        }
        table = this.schema.hasTable(tableName);
        if (!table) {
          return cb(new Error("dbconnect:select:unknown_table: " + tableName));
        }
        query = this.generateSelect(table, query);
        return this.query(query, {}, function(err, results) {
          try {
            if (err) {
              return cb(err);
            } else {
              return cb(null, _this.makeRecordSet(tableName, results));
            }
          } catch (err) {
            return cb(err);
          }
        });
      } catch (e) {
        return cb(e);
      }
    };

    DBConnect.prototype.selectOne = function(tableName, query, cb) {
      var _this = this;
      return this.select(tableName, query, function(err, recordset) {
        if (err) {
          return cb(err);
        } else {
          if (recordset.length > 0) {
            return cb(null, recordset.first());
          } else {
            return cb(new Error("dbconnect.selectOne:no_record_returned: " + tableName + ", " + (JSON.stringify(query))));
          }
        }
      });
    };

    DBConnect.prototype.uuid = uuid.v4;

    DBConnect.prototype.normalizeRecord = function(table, rec) {
      return rec;
    };

    DBConnect.prototype.makeRecord = function(tableName, rec) {
      return this.schema.makeRecord(this, tableName, rec);
    };

    DBConnect.prototype.makeRecordSet = function(tableName, recs) {
      return this.schema.makeRecordSet(this, tableName, recs);
    };

    DBConnect.prototype.supports = function(key) {
      return false;
    };

    DBConnect.prototype.generateInQuery = function() {
      throw new Error("DBConnect.generateInQuery:not_supported");
    };

    DBConnect.prototype.generateSchema = function(schema) {
      if (schema == null) {
        schema = this.schema;
      }
    };

    return DBConnect;

  })(EventEmitter);

  module.exports = DBConnect;

}).call(this);
